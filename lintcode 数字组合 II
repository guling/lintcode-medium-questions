题目链接：http://www.lintcode.com/zh-cn/problem/combination-sum-ii/
数字组合 II 查看运行结果 

给出一组候选数字(C)和目标数字(T),找出C中所有的组合，使组合中数字的和为T。C中每个数字在每个组合中只能使用一次。

样例
给出一个例子，候选数字集合为[10,1,6,7,2,1,5] 和目标数字 8  ,

解集为：[[1,7],[1,2,5],[2,6],[1,1,6]]

注意
所有的数字(包括目标数字)均为正整数。
元素组合(a1, a2, … , ak)必须是非降序(ie, a1 ≤ a2 ≤ … ≤ ak)。
解集不能包含重复的组合。 

class Solution {
public:
	/**
	 * @param num: Given the candidate numbers
	 * @param target: Given the target number
	 * @return: All the combinations that sum to target
	 */
	bool cmp (vector<int> &a, vector<int> &b){
	    if(a.size()!=b.size()) return false;
	    for(int i=0; i<a.size(); ++i)
	        if(a[i] != b[i])
	            return false;
	    return true;
	}
	 
	vector<vector<int> > vv;
	set<vector<int> > st;
	int tot;
	void dfs(vector<int> &num, int target, int preTot, int sum, vector<int> &v, int cur){
	    if(sum == target){
	        vector<int> vx(v);
	        sort(vx.begin(), vx.end());
	        if(st.find(vx) == st.end()){
	            st.insert(vx);
	            vv.push_back(vx);
	        }
	        return ;
	    }
	    if(cur >= num.size()) return;
	    if(tot-preTot>=sum-target){
    	    if(sum+num[cur]<=target){
    	        v.push_back(num[cur]);
    	        dfs(num, target, preTot+num[cur], sum+num[cur], v, cur+1);
    	        v.pop_back();
    	    }
    	    dfs(num, target, preTot+num[cur], sum, v, cur+1);
	    }
	}
    vector<vector<int> > combinationSum2(vector<int> &num, int target) {
        // write your code here
        vv.clear();
        st.clear();
        vector<int> v;
        tot = 0;
        for(int i=0; i<num.size(); ++i)
            tot += num[i];
        dfs(num, target, 0, 0, v, 0);
        return vv;
    }
};
