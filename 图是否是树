图是否是树 http://www.lintcode.com/zh-cn/problem/graph-valid-tree/#

给出 n 个节点，标号分别从 0 到 n - 1 并且给出一个 无向 边的列表 (给出每条边的两个顶点), 写一个函数去判断这张｀无向｀图是否是一棵树

 注意事项

你可以假设我们不会给出重复的边在边的列表当中. 无向边　[0, 1] 和 [1, 0]　是同一条边， 因此他们不会同时出现在我们给你的边的列表当中。

您在真实的面试中是否遇到过这个题？ Yes
样例
给出n = 5 并且 edges = [[0, 1], [0, 2], [0, 3], [1, 4]], 返回 true.

给出n = 5 并且 edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], 返回 false.

public class Solution {
    private List[] edgesList;
    private int[] vis;
    private boolean judge(int x){
        vis[x] = -1;
        for(int i=0; i<edgesList[x].size(); ++i){
            int y = (int)edgesList[x].get(i);
            if(vis[y] == 0) {
                if(!judge(y)) return false;
            } else if(vis[y] == 1) {
                return false;
            }
        }
        vis[x] = 1;
        return true;
    }
    /**
     * @param n an integer
     * @param edges a list of undirected edges
     * @return true if it's a valid tree, or false
     */
    public boolean validTree(int n, int[][] edges) {
        vis = new int[n];
        edgesList = new ArrayList[n];
        for(int i=0; i<n; ++i) edgesList[i] = new ArrayList();
        for(int i=0; i<edges.length; ++i){
            edgesList[edges[i][0]].add(edges[i][1]);
            edgesList[edges[i][1]].add(edges[i][0]);
        }
        if(!judge(0)) return false;
        boolean isTree = true;
        for(int i=0; i<n; ++i)
            if(vis[i] == 0) {
                isTree = false;
                break;
            }
        return isTree;
    }
}
