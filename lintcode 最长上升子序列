题目链接：http://www.lintcode.com/zh-cn/problem/longest-increasing-subsequence/
最长上升子序列 查看运行结果 

给定一个整数序列，找到最长上升子序列（LIS），返回LIS的长度。

样例
给出[5,4,1,2,3]，这个LIS是[1,2,3]，返回 3

给出[4,2,4,5,3,7]，这个LIS是[4,4,5,7]，返回 4

挑战
要求时间复杂度为O(n^2) 或者O(nlogn)

说明
最长上升子序列的定义：

最长上升子序列问题是在一个无序的给定序列中找到一个尽可能长的由低到高排列的子序列，这种子序列不一定是连续的或者唯一的。
https://en.wikipedia.org/wiki/Longest_common_subsequence_problem

class Solution {
public:
    /**
     * @param nums: The integer array
     * @return: The length of LIS (longest increasing subsequence)
     */
    int longestIncreasingSubsequence(vector<int> nums) {
        // write your code here
        //方法1： O(n^2)
        // int n = nums.size();
        // if(n == 0) return 0;
        // int lis[n];
        // for(int i=0; i<n; ++i)
        //     lis[i] = 1;
        // for(int i=0; i<n; ++i)
        //     for(int j=0; j<i; ++j)
        //         if(nums[i]>=nums[j] && lis[j]+1>lis[i])
        //             lis[i] = lis[j]+1;
        // return *max_element(lis, lis+n);
        
        //方法2：O(nlogn)
        vector<int>ret;
        for(int i=0; i<nums.size(); ++i){
            int ll = upper_bound(ret.begin(), ret.end(), nums[i]) - ret.begin();
            if(ll == ret.size())
                ret.push_back(nums[i]);
            else 
                ret[ll] = nums[i];
        }
        return ret.size();
    }
};
