题目链接：http://www.lintcode.com/en/problem/graph-valid-tree/
Graph Valid Tree Show result 

Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Have you met this question in a real interview? Yes
Example
Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.

Note
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

class Solution {
public:
    /**
     * @param n an integer
     * @param edges a list of undirected edges
     * @return true if it's a valid tree, or false
     */
    int f[5000];
    int getFather(int x){
        return x==f[x] ? f[x] : f[x]=getFather(f[x]);
    }
    bool _union(int a, int b){
        int fa = getFather(a);
        int fb = getFather(b);
        if(fa!=fb){
            f[fa] = fb;
            return true;
        }
        return false;
    }
    bool validTree(int n, vector<vector<int>>& edges) {
        // Write your code here
        if(edges.size() != n-1) return false;
        //并查集
        for(int i=0; i<n; ++i)
            f[i] = i;
        for(int i=0; i<n-1; ++i){
            vector<int> e = edges[i];
            if(!_union(e[0], e[1])) return false;
        }
        return true;
    }
};
