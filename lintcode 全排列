题目链接：http://www.lintcode.com/zh-cn/problem/permutations/
全排列 查看运行结果 

给定一个数字列表，返回其所有可能的排列。

样例
给出一个列表[1,2,3]，其全排列为：

[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
挑战
使用递归和非递归分别解决。

class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
    vector<vector<int> > vv;
    
    ///
    int nn;//没有 unique 之前的数组的大小
    map<int, int> mp;
    //递归思路：一共有nn个位置，然后每个位置枚举可能出现的数字
    void dfs_1(int cur, vector<int> &v, vector<int> nums){
        if(cur >= nn){
            vv.push_back(v);
            return;
        }
        for(int i=0; i<nums.size(); ++i)
            if(mp[nums[i]]){//如果nums[i]这个数字没有枚举完
                --mp[nums[i]];
                v.push_back(nums[i]);
                dfs_1(cur+1, v, nums);
                v.pop_back();
                ++mp[nums[i]];
            }
    }
    
    ////
    //递归思路：每一个数，不断的和后面的数交换位置，每交换一次就会得到一个新的排列
    void dfs_2(int ld, int rd, vector<int> nums){
        if(ld == rd){
            vv.push_back(nums);
            return ;
        }
        for(int i=ld; i<=rd; ++i){
            swap(nums[ld], nums[i]);
            dfs_2(ld+1, rd, nums);
            swap(nums[ld], nums[i]);
        }
    }
    
    
    vector<vector<int> > permute(vector<int> nums) {
        if(nums.size() == 0) return vv;
        sort(nums.begin(), nums.end());
        //方法1： 非递归实现
        // int n = nums.size();
        // bool flag = true;
        // vv.push_back(nums);
        // while(flag){
        //     flag = false;
        //     for(int i=n-1; i>=0; --i){
        //         for(int j=n-1; j>i; --j)
        //             if(nums[i] < nums[j]){
        //                 swap(nums[i], nums[j]);
        //                 sort(nums.begin()+i+1, nums.end());
        //                 vv.push_back(nums);
        //                 flag = true;
        //                 break;
        //             }
        //         if(flag) break;
        //     }
        // }
        
        //方法2：调用<algorithm>中的next_permutation()
        // do{
        //     vv.push_back(nums);
        // }while(next_permutation(nums.begin(), nums.end()));
        
        //方法3：递归
        // for(int i=0; i<nums.size(); ++i)//统计每个重复元素的个数
        //     ++mp[nums[i]];
        // nn = nums.size();
        // unique(nums.begin(), nums.end());//对数组进行去重
        // vector<int> v;
        // dfs_1(0, v, nums);
        
        //方法4：递归
        dfs_2(0, nums.size()-1, nums);
        return vv;
    }
};
