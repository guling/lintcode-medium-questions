题目链接：http://www.lintcode.com/zh-cn/problem/combination-sum/
数字组合 查看运行结果 

给出一组候选数字(C)和目标数字(T),找到C中所有的组合，使找出的数字和为T。C中的数字可以无限制重复被选取。

例如,给出候选数组[2,3,6,7]和目标数字7，所求的解为：

[7]，

[2,2,3]

样例
给出候选数组[2,3,6,7]和目标数字7

返回 [[7],[2,2,3]]

注意
所有的数字(包括目标数字)均为正整数。
元素组合(a1, a2, … , ak)必须是非降序(ie, a1 ≤ a2 ≤ … ≤ ak)。
解集不能包含重复的组合。 

class Solution {
public:
    /**
     * @param candidates: A list of integers
     * @param target:An integer
     * @return: A list of lists of integers
     */
    vector<vector<int> > vv;
    void dfs(vector<int> &candidate, vector<int> &v, int cur, int target, int sum){
        if(sum == target){
            vv.push_back(v);
            return ;
        }
        if(cur >= candidate.size()) return ;
        if(sum+candidate[cur] <= target){
            v.push_back(candidate[cur]);
            dfs(candidate, v, cur, target, sum+candidate[cur]);
            v.pop_back();
            
            dfs(candidate, v, cur+1, target, sum);
        }
    }
    vector<vector<int> > combinationSum(vector<int> &candidates, int target) {
        // write your code here
        vector<int> v;
        sort(candidates.begin(), candidates.end());
        dfs(candidates, v, 0, target, 0);
        return vv;
    }
};
