题目链接：http://www.lintcode.com/zh-cn/problem/binary-tree-level-order-traversal/
二叉树的层次遍历 查看运行结果 

给出一棵二叉树，返回其节点值的层次遍历（逐层从左往右访问）

样例
给一棵二叉树 {3,9,20,#,#,15,7} ：

  3
 / \
9  20
  /  \
 15   7
返回他的分层遍历结果：

[
  [3],
  [9,20],
  [15,7]
]
挑战
挑战1：只使用一个队列去实现它

挑战2：用DFS算法来做

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
 
 
class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: Level order a list of lists of integer
     */
public:
    
    void dfs(TreeNode *root, int level, vector<vector<int>> &vv){
        if(root){
            if(vv.size() < level){
                vector<int> v;
                v.push_back(root->val);
                vv.push_back(v);
            } else {
                vv[level-1].push_back(root->val);
            }
            dfs(root->left, level+1, vv);
            dfs(root->right, level+1, vv);
        }
    }

    vector<vector<int>> levelOrder(TreeNode *root) {
        // write your code here
        
        //方法1：使用一个队列去实现它 bfs
        vector<vector<int>> vv;
        if(root == NULL) return vv;
        // queue<TreeNode *> q;
        // q.push(root);
        // int levelCnt = 1;//上一层的节点数目
        // int curLevelCnt = 0;//下一层节点数目
        // vector<int> v;
        // while(!q.empty()){
        //     TreeNode *cur = q.front();
        //     q.pop();
        //     if(cur->left){
        //         q.push(cur->left);
        //         ++curLevelCnt;
        //     }
        //     if(cur->right){
        //         q.push(cur->right);
        //         ++curLevelCnt;
        //     }
        //     v.push_back(cur->val);
        //     --levelCnt;
        //     if(levelCnt == 0){//这一层完毕
        //         vv.push_back(v);
        //         v.clear();
        //         levelCnt = curLevelCnt;
        //         curLevelCnt = 0;
        //     }
        // }
        
        //方法2：用DFS算法来做
        dfs(root, 1, vv);
        return vv;
    }
};
