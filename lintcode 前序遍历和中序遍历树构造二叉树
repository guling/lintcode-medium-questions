题目链接：http://www.lintcode.com/zh-cn/problem/construct-binary-tree-from-preorder-and-inorder-traversal/
前序遍历和中序遍历树构造二叉树 查看运行结果 

根据前序遍历和中序遍历树构造二叉树.

样例
给出中序遍历：[1,2,3]和前序遍历：[2,1,3]. 返回如下的树:

  2
 / \
1   3
注意
你可以假设树中不存在相同数值的节点

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
 

class Solution {
    /**
     *@param preorder : A list of integers that preorder traversal of a tree
     *@param inorder : A list of integers that inorder traversal of a tree
     *@return : Root of a tree
     */
public:

    void buildT(TreeNode * &T, vector<int> &preorder, vector<int> &inorder, int preI, int inoI, int inoL){
        if(inoI>=inoL) return ;
        T = new TreeNode(preorder[preI]);
        int inoP;
        for(int i=inoI; i<inoL; ++i)
            if(inorder[i] == preorder[preI]){
                inoP = i;
                break;
            }
        buildT(T->left, preorder, inorder, preI+1, inoI, inoP);
        buildT(T->right, preorder, inorder, preI+inoP-inoI+1, inoP+1, inoL);
    }
    
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        // write your code here
        TreeNode *T = NULL;
        buildT(T, preorder, inorder, 0, 0, inorder.size());
        return T;
    }
};
