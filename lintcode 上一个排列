题目链接：http://www.lintcode.com/zh-cn/problem/previous-permutation/
上一个排列 查看运行结果 

给定一个整数数组来表示排列，找出其上一个排列。

样例
给出排列[1,3,2,3]，其上一个排列是[1,2,3,3]

给出排列[1,2,3,4]，其上一个排列是[4,3,2,1]

注意
排列中可能包含重复的整数

class Solution {
public:
    /**
     * @param nums: An array of integers
     * @return: An array of integers that's previous permuation
     */
    vector<int> previousPermuation(vector<int> &nums) {
        // write your code here
        
        //直接调用<algrotihm>中的算法prev_permutation()
        // if(!prev_permutation(nums.begin(), nums.end()))
        //     sort(nums.begin(), nums.end(), greater<int>());
        // return nums;
        
        //自己的方法
        int ld = -1;
        if(nums.size() <= 1) return nums;
        for(int i=nums.size()-2; i>=0; --i)//找到从右边开始第一个比它右边相邻大的数的位置
            if(nums[i] > nums[i+1]){
                ld = i;
                break;
            }
        if(ld != -1){//找到从右边开始，第一个比位置为ld所在数 小的数的位置
            int rd;
            for(int i=nums.size()-1; i>=0; --i)
                if(nums[ld] > nums[i]){
                    rd = i;
                    break;
                }
            swap(nums[ld], nums[rd]);
            //在交换之前，ld位置后面的已经是从小到大排好序的，已经没有上一个排列了
            //交换之后，将ld后面的数置为最大的排列，从大到小排序
            sort(nums.begin()+ld+1, nums.end(), greater<int>());
        }
        
        if(ld == -1){
            sort(nums.begin(), nums.end(), greater<int>());
        }
        return nums;
    }
};
