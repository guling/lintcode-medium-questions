题目链接：http://www.lintcode.com/zh-cn/problem/n-queens/
N皇后问题 查看运行结果 

n皇后问题是将n个皇后放置在n*n的棋盘上，皇后彼此之间不能相互攻击。

给定一个整数n，返回所有不同的n皇后问题的解决方案。

每个解决方案包含一个明确的n皇后放置布局，其中“Q”和“.”分别表示一个女王和一个空位置。

样例
对于4皇后问题存在两种解决的方案：

[

    [".Q..", // Solution 1

     "...Q",

     "Q...",

     "..Q."],

    ["..Q.", // Solution 2

     "Q...",

     "...Q",

     ".Q.."]

]

挑战
你能否不使用递归完成？

class Solution {
public:
    /**
     * Get all distinct N-Queen solutions
     * @param n: The number of queens
     * @return: All distinct solutions
     * For example, A string '...Q' shows a queen on forth position
     */
    
    int col[100];
    char mp[100][100];//n皇后的地图
    int vis[2][200];
    vector<vector<string> > vv;
    void dfs(int cur, int n){
        if(cur >= n){
            vector<string> v;
            for(int i=0; i<n; ++i){
                string s(mp[i], n);
                v.push_back(s);
            }
            vv.push_back(v);
            return;
        }
        for(int i=0; i<n; ++i)
            if(!col[i] && !vis[0][i+cur] && !vis[1][i-cur+n]){//不在同一行，不在同一列，不在同一对角线（主对角线和副对角线）
                col[i] = vis[0][i+cur] = vis[1][i-cur+n] = 1;
                mp[cur][i] = 'Q';
                dfs(cur+1, n);
                mp[cur][i] = '.';
                col[i] = vis[0][i+cur] = vis[1][i-cur+n] = 0;
            }
    }
    
    vector<vector<string> > solveNQueens(int n) {
        // write your code here
        memset(col, 0, sizeof(col));
        memset(vis, 0, sizeof(vis));
        memset(mp, '.', sizeof(mp));
        dfs(0, n);
        return vv;
    }
};

