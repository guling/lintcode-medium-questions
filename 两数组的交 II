题目链接：http://www.lintcode.com/zh-cn/problem/intersection-of-two-arrays-ii/?rand=true
计算两个数组的交

 注意事项

每个元素出现次数得和在数组里一样
答案可以以任意顺序给出

您在真实的面试中是否遇到过这个题？ Yes
样例
nums1 = [1, 2, 2, 1], nums2 = [2, 2], 返回 [2, 2].

//暴力超时
public class Solution {
    /**
     * @param nums1 an integer array
     * @param nums2 an integer array
     * @return an integer array
     */
    public int[] intersection(int[] a, int[] b) {
        List<Integer> ret = new ArrayList<Integer>();
        boolean[] vis = new boolean[b.length];
        for(int i=0; i<a.length; ++i){
            for(int j=0; j<b.length; ++j) {
                if(a[i] == b[j] && !vis[j]) {
                    ret.add(a[i]);
                    vis[j] = true;
                    break;
                }
            }
        }
        int[] ans = new int[ret.size()];
        for(int i=0; i<ans.length; ++i)
            ans[i] = ret.get(i);
        return ans;
    }
}

//二分
public class Solution {
    /**
     * @param nums1 an integer array
     * @param nums2 an integer array
     * @return an integer array
     */
     
    private boolean[] vis;
     
    public int[] intersection(int[] a, int[] b) {
        Arrays.sort(a);//默认从小到大排序
        vis = new boolean[a.length];
        List<Integer> list = new ArrayList<Integer>();
        for(int i=0; i<b.length; ++i) {
            int pos = bsearch(a, b[i]);
            if(pos == -1) continue;
            list.add(b[i]);
        }
        int[] ret = new int[list.size()];
        for(int i=0; i<ret.length; ++i)
            ret[i] = list.get(i);
        return ret;
    }
    
    private int bsearch(int a[], int k){
        int ld = 0, rd = a.length-1;
        while(ld <= rd){
            int mid = (ld+rd)/2;
            if(a[mid] == k) {
                if(!vis[mid]) {
                    vis[mid] = true;
                    return mid;    
                } else {
                    for(int i=mid-1; i>=ld; --i)
                        if(!vis[i] && a[i] == k){
                            vis[i] = true;
                            return i;
                        }
                    for(int i=mid+1; i<=rd; ++i)
                        if(!vis[i] && a[i] == k){
                            vis[i] = true;
                            return i;
                        }
                    return -1;
                }
            } else if(a[mid] < k)
                ld = mid+1;
            else 
                rd = mid-1;
        }
        return -1;
    }
    
}

//哈希
public class Solution {
    /**
     * @param nums1 an integer array
     * @param nums2 an integer array
     * @return an integer array
     */
    public int[] intersection(int[] a, int[] b) {
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        List<Integer> list = new ArrayList<Integer>();
        for(int x : a){
            if(map.get(x) == null)
                map.put(x, 0);
            map.put(x, map.get(x)+1);
        }
        
        for(int x : b){
            if(map.get(x) == null || map.get(x) == 0) continue;
            map.put(x, map.get(x)-1);
            list.add(x);
        }
        
        int[] ret = new int[list.size()];
        
        for(int i=0; i<ret.length; ++i)
            ret[i] = list.get(i);
        return ret;
    }
}
