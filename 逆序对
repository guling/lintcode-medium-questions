题目链接：http://www.lintcode.com/zh-cn/problem/reverse-pairs/

在数组中的两个数字如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。给你一个数组，求出这个数组中逆序对的总数。
概括：如果a[i] > a[j] 且 i < j， a[i] 和 a[j] 构成一个逆序对。
您在真实的面试中是否遇到过这个题？
样例

序列 [2, 4, 1, 3, 5] 中，有 3 个逆序对 (2, 1), (4, 1), (4, 3)，则返回 3 。

方法1：直接暴力
public class Solution {
    /**
     * @param A an array
     * @return total of reverse pairs
     */
    public long reversePairs(int[] A) {
        long ans = 0;
        for(int i=0; i<A.length; ++i) {
            for(int j=i+1; j<A.length; ++j){
                if(A[i] > A[j]) ++ans;
            }
        }
        
        return ans;
    }
}

方法2： 归并排序思想
public class Solution {
    /**
     * @param A an array
     * @return total of reverse pairs
     */
    public long reversePairs(int[] A) {
        ans = 0;
        merge(A, 0, A.length-1);
        return ans;
    }
    
    private long ans;
    private void merge(int[] A, int ld, int rd){
        if(ld >= rd) return;
        int mid = (ld+rd)>>1;
        merge(A, ld, mid);
        merge(A, mid+1, rd);
        int[] tmpA = new int[rd-ld+1];
        int i, j, k;
        for(i=ld, j=mid+1, k=0; i<=mid && j<=rd; ++k){
            if(A[i] > A[j]) {
                ans += (rd-j+1);
                tmpA[k] = A[i];
                ++i;
            } else {
                tmpA[k] = A[j];
                ++j;
            }
        }
        
        for(; i<=mid; ++i) tmpA[k++] = A[i];
        for(; j<=rd; ++j) tmpA[k++] = A[j];
        
        System.arraycopy(tmpA, 0, A, ld, k);
        
    }
}

方法3：树状数组

