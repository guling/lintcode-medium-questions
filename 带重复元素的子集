题目链接：http://www.lintcode.com/zh-cn/problem/subsets-ii/?rand=true
给定一个可能具有重复数字的列表，返回其所有可能的子集

 注意事项

子集中的每个元素都是非降序的
两个子集间的顺序是无关紧要的
解集中不能包含重复子集
您在真实的面试中是否遇到过这个题？ Yes
样例
如果 S = [1,2,2]，一个可能的答案为：

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]

class Solution {
    /**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    public ArrayList<ArrayList<Integer>> subsetsWithDup(ArrayList<Integer> S) {
        Collections.sort(S);
        ArrayList<ArrayList<Integer>> ret = new ArrayList<ArrayList<Integer>>();
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int x : S) {
            if(map.get(x) == null)
                map.put(x, 0);
            map.put(x, map.get(x)+1);
        }
        
        ArrayList<Integer> tmp = new ArrayList<Integer>();
        Integer[] s = map.keySet().toArray(new Integer[map.keySet().size()]);
        //不重复元素的情况
        // for(int i=0; i<=s.length; ++i)
        //     dfs(ret, tmp, s, i, 0);
        this.map = map;
        
        dfs_r(ret, tmp, s);
        return ret;
    }
    
    private Map<Integer, Integer> map;
    
    //搜索带重复元素
    private void dfs_r(ArrayList<ArrayList<Integer>> ret, ArrayList<Integer> tmp, Integer[] s){
        ret.add((ArrayList<Integer>)tmp.clone());
        for(int x : s) {
            if(map.get(x) > 0) {
                if(tmp.size() > 0 && x < tmp.get(tmp.size()-1)) continue;
                map.put(x, map.get(x)-1);
                tmp.add(x);
                dfs_r(ret, tmp, s);
                tmp.remove(tmp.size()-1);
                map.put(x, map.get(x)+1);
            }
        }
    }
    
    //搜索不带重复元素的结果集
    private void dfs(ArrayList<ArrayList<Integer>> ret, ArrayList<Integer> tmp, Integer[] s, int tot, int index) {
        if(tmp.size() == tot) {
            ret.add((ArrayList<Integer>)tmp.clone());
            return;
        }
        if(index >= s.length) return;
        tmp.add(s[index]);
        dfs(ret, tmp, s, tot, index+1);
        tmp.remove(tmp.size()-1);
        dfs(ret, tmp, s, tot, index+1);
    }
}
