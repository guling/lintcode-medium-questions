题目链接：http://www.lintcode.com/zh-cn/problem/heapify/
堆化 查看运行结果 

给出一个整数数组，堆化操作就是把它变成一个最小堆数组。

对于堆数组A，A[0]是堆的根，并对于每个A[i]，A [i * 2 + 1]是A[i]的左儿子并且A[i * 2 + 2]是A[i]的右儿子。

样例
给出 [3,2,1,4,5]，返回[1,2,3,4,5] 或者任何一个合法的堆数组

挑战
O(n)的时间复杂度完成堆化

说明
什么是堆？

堆是一种数据结构，它通常有三种方法：push， pop 和 top。其中，“push”添加新的元素进入堆，“pop”删除堆中最小/最大元素，“top”返回堆中最小/最大元素。
什么是堆化？

把一个无序整数数组变成一个堆数组。如果是最小堆，每个元素A[i]，我们将得到A[i * 2 + 1] >= A[i]和A[i  * 2 + 2] >= A[i]
如果有很多种堆化的结果？

返回其中任何一个。

class Solution {
public:
    /**
     * @param A: Given an integer array
     * @return: void
     */
    void heapify(vector<int> &A) {
        // write your code here
        //方法1：调用<algorithm>中的方法
        //make_heap(A.begin(), A.end(), greater<int>());
        
        //方法2：自己完成
        int n=A.size();
        for(int i=n/2; i>=1; --i){//从最后一个非零的数字开始
            int curN = A[i-1];//保存当前节点的值
            int p = i;
            int ch;
            while((ch=p*2) <= n){//左子树
                if(ch+1<=n && A[ch]<A[ch-1])
                    ++ch;//右子树
                if(A[ch-1] > curN)//父节点别左右两个孩子都小，则结束继续向下调整
                    break;
                A[p-1] = A[ch-1];
                p = ch;
            }
            A[p-1] = curN;
        }
    }
};
